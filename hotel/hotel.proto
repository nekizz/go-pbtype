syntax = "proto3";

package hotel;

option go_package = "github.com/n3kizz/go-pbtype/hotel";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/protobuf/empty.proto";
import "google/api/annotations.proto";


// Enable custom Marshal method.
option (gogoproto.marshaler_all) = true;
// Enable custom Unmarshal method.
option (gogoproto.unmarshaler_all) = true;
// Enable custom Size method (Required by Marshal and Unmarshal).
option (gogoproto.sizer_all) = true;
// Enable registration with golang/protobuf for the grpc-gateway.
option (gogoproto.goproto_registration) = true;
// Enable generation of XXX_MessageName methods for grpc-go/status.
option (gogoproto.messagename_all) = true;

message Hotel {
  string id = 1;
  string name = 2;
  int32 star_level = 3;
  string address = 4;
  int32 rate = 5;
  string rule = 6;
  string description = 7;
  string comment =8;

  string created_at = 20;
  string updated_at = 21;
}

message OneHotelRequest {
  string id = 1;
}

message ListHotelRequest {
  uint32 page = 3;
  uint32 limit = 4;
  string created_at_min = 5;
  string created_at_max = 6;
  string search_field = 7;
  string search_value = 8;
}

message ListHotelResponse {
  repeated Hotel items = 1;
  uint32 max_page = 2;
  uint32 total_count = 3;
  uint32 page = 4;
  uint32 limit = 5;
  string search_field = 6;
  string search_value = 7;
}

service HotelService {
  rpc Create(Hotel) returns (Hotel) {
    option (google.api.http) = {
      post: "/hotel"
      body: "*"
    };
  };

  rpc Update(Hotel) returns (Hotel) {
    option (google.api.http) = {
      put: "/hotel/{id}"
      body: "*"
    };
  };
  rpc Get(OneHotelRequest) returns (Hotel) {
    option (google.api.http) = {
      get: "/hotel/{id}"
    };
  };
  rpc List(ListHotelRequest) returns (ListHotelResponse) {
    option (google.api.http) = {
      get: "/hotels"
    };
  };
  rpc Delete(OneHotelRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/hotel/{id}"
    };
  };
}